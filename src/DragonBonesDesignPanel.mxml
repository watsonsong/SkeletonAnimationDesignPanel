<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:view="view.*"
			   addedToStage="addedToStageHandler()"
			   applicationComplete="applicationCompleteHandler()"
			   preloader="prevloadClasses.Prevloader" 
			   width="100%" height="100%"
			   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import cloud.DBCloud;
			import cloud.DBNetworkUtils;
			import cloud.GA.DBGATrackerManager;
			import cloud.events.DBCloudEvent;
			import cloud.events.DBNetworkEvent;
			
			import control.CopyBoneAndAnimationCommand;
			import control.ImportCommand;
			import control.RemoveArmatureCommand;
			
			import dragonBones.animation.WorldClock;
			import dragonBones.core.DragonBones;
			import dragonBones.objects.ArmatureData;
			import dragonBones.utils.ConstValues;
			
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			import model.JSFLProxy;
			import model.SettingDataProxy;
			
			import view.ExportWindow;
			import view.ImportWindow;
			
			//
			JSFLProxy.getInstance();

			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private var _alert:Alert;
			
			private function addedToStageHandler():void
			{	
				armatureViewer.addEventListener(ArmatureViewer.VIEW_SELECT_BONE, armatureViewerHandler);
				armatureViewer.addEventListener(ArmatureViewer.VIEW_CHANGE_BONE_PARENT, armatureViewerHandler);
				
				this.addEventListener(Event.ENTER_FRAME, enterFrameHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FLADATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_ARMATURE_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_TEXTURE_DATA, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_ERROR, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.LOAD_FILEDATA_PROGRESS, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.IMPORT_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_CANCEL, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_ERROR, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.EXPORT_COMPLETE, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.COPY_BONE_AND_ANIMATION, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SAVE_ANIMATION_START, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SAVE_ANIMATION_PROGRESS, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SAVE_ANIMATION_COMPLETE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SAVE_ANIMATION_ERROR, commandHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_IMPORT_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_ARMATURE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_BONE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_PARENT, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_ANIMATION_DATA, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_TRANSFORM_TIMELINE_DATA, commandHandler);
				
				if(this.loaderInfo)
				{
					this.loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
					var data:String = this.loaderInfo.parameters["data"];
					if(data)
					{
						ImportCommand.instance.importFileData(false, data);
					}
				}
				
				this.stage.frameRate = 60;
			}
			
			private function armatureViewerHandler(e:Message):void
			{
				switch(e.type)
				{
					case ArmatureViewer.VIEW_SELECT_BONE:
						_importDataProxy.armatureProxy.selectBone(e.parameters[0]);
						break;
					case ArmatureViewer.VIEW_CHANGE_BONE_PARENT:
						_importDataProxy.armatureProxy.changeBoneParent(e.parameters[0], e.parameters[1]);
						break;
				}
			}
			
			private function enterFrameHandler(event:Event):void
			{
				WorldClock.clock.advanceTime(-1);
			}
			
			private function commandHandler(e:Message):void
			{
				var armatureName:String = _importDataProxy.armatureProxy.armatureName;
				
				switch(e.type)
				{
					case MessageDispatcher.LOAD_FLADATA:
						if(e.parameters[0] > 0)
						{
							_alert = Alert.show(resourceManager.getString('resources','importFLAWaitting', [e.parameters[1]]));
						}
						else
						{
							_alert = Alert.show(resourceManager.getString('resources',"importNoElement", [e.parameters[1]]));
						}
						break;
					case MessageDispatcher.LOAD_ARMATURE_DATA:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importSkeletonProgress', [e.parameters[1], e.parameters[2]]);
						}
						break;
					case MessageDispatcher.LOAD_TEXTURE_DATA:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importTextureProgress', [e.parameters[1], e.parameters[2]]);
						}
						break;
					case MessageDispatcher.LOAD_FILEDATA:
						_alert = Alert.show(resourceManager.getString('resources', 'importFileWaitting'));
						break;
					case MessageDispatcher.LOAD_FILEDATA_ERROR:
						clearAlert();
						_alert = Alert.show(resourceManager.getString('resources', 'importFileError'));
						break;
					case MessageDispatcher.LOAD_FILEDATA_PROGRESS:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'importFileProgress', [Math.round(e.parameters[0] * 100)]);
						}
						break;
					case MessageDispatcher.SAVE_ANIMATION_START:
						clearAlert();
						_alert = Alert.show(resourceManager.getString('resources',"saveAnimation"));
						break;
					case MessageDispatcher.SAVE_ANIMATION_PROGRESS:
						if(_alert)
						{
							_alert.title = resourceManager.getString('resources', 'saveAnimationProgress', [e.parameters[0], e.parameters[1]]);
						}
						break;
					case MessageDispatcher.SAVE_ANIMATION_COMPLETE:
						clearAlert();
						break;
					case MessageDispatcher.IMPORT_COMPLETE:
						clearAlert();
						WorldClock.clock.clear();
						_importDataProxy.setData(e.parameters[0], e.parameters[1], e.parameters[2], e.parameters[3]);
						break;
					case MessageDispatcher.EXPORT:
						_alert = Alert.show(resourceManager.getString('resources', 'exportWaitting'));
						break;
					case MessageDispatcher.EXPORT_CANCEL:
						clearAlert();
						break;
					case MessageDispatcher.EXPORT_ERROR:
						clearAlert();
						_alert = Alert.show(resourceManager.getString('resources', 'exportError'));
						break;
					case MessageDispatcher.EXPORT_COMPLETE:
						clearAlert();
						break;
					case MessageDispatcher.CHANGE_IMPORT_DATA:
						if(_importDataProxy.data && _importDataProxy.data.armatureDataList.length > 0)
						{
							_importDataProxy.armatureProxy.armatureData = 
								_importDataProxy.data.getArmatureData(armatureName) ||
								_importDataProxy.data.armatureDataList[0];
						}
						else
						{
							_importDataProxy.armatureProxy.armatureData = null;
						}
						break;
					case MessageDispatcher.SELECT_ARMATURE:
						if(_importDataProxy.armatureProxy.skinsAC.length > 1)
						{
							skinDropDownList.visible = true;
							skinDropDownList.percentWidth  = 100;
						}
						else
						{
							skinDropDownList.visible = false;
							skinDropDownList.width = 0;
						}
						skinDropDownList.selectedItem = _importDataProxy.armatureProxy.selectedSkinData;
						break;
					case MessageDispatcher.SELECT_BONE:
						if(e.parameters[0] == _importDataProxy.armatureProxy)
						{
							armatureViewer.updateSelectedBone(_importDataProxy.armatureProxy.selectedBoneName);
						}
						break;
					case MessageDispatcher.COPY_BONE_AND_ANIMATION:
						if(!_importDataProxy.isExportedSource)
						{
							CopyBoneAndAnimationCommand.instance.copy(e.parameters[0], e.parameters[1]);
						}
						break;
					case MessageDispatcher.CHANGE_BONE_PARENT:
						if(e.parameters[0] == _importDataProxy.armatureProxy)
						{
							_importDataProxy.xmlDataProxy.changeBoneParent(armatureName, e.parameters[1], e.parameters[2]);
							if(!_importDataProxy.isExportedSource)
							{
								var armatureXML:XML = _importDataProxy.xmlDataProxy.getArmatureXMLList(armatureName)[0];
								JSFLProxy.getInstance().changeArmatureConnection(armatureName, armatureXML);
							}
						}
						break;
					case MessageDispatcher.CHANGE_ANIMATION_DATA:
						if(e.parameters[0] == _importDataProxy.armatureProxy)
						{
							var animationName:String = e.parameters[1];
							_importDataProxy.xmlDataProxy.changeAnimationData(_importDataProxy.armatureProxy.armatureData, animationName);
							if(!_importDataProxy.isExportedSource)
							{
								var animationXML:XML = _importDataProxy.xmlDataProxy.getAnimationXMLList(armatureName, animationName)[0];
								JSFLProxy.getInstance().changeAnimation(armatureName, animationName, animationXML);
							}
						}
						break;
					case MessageDispatcher.CHANGE_TRANSFORM_TIMELINE_DATA:
						if(e.parameters[0] == _importDataProxy.armatureProxy)
						{
							animationName = e.parameters[1];
							_importDataProxy.xmlDataProxy.changeTransformTimelineData(_importDataProxy.armatureProxy.armatureData, animationName, e.parameters[2]);
							if(!_importDataProxy.isExportedSource)
							{
								var animationXMLCopy:XML = _importDataProxy.xmlDataProxy.getAnimationXMLList(armatureName, animationName)[0].copy();
								delete animationXMLCopy[ConstValues.TIMELINE].*;
								delete animationXMLCopy[ConstValues.FRAME];
								JSFLProxy.getInstance().changeAnimation(armatureName, animationName, animationXMLCopy);
							}
						}
						break;
				}
			}
			
			private function importData():void
			{
				DBGATrackerManager.trackPageview("/importWindow");
				var window:ImportWindow = new ImportWindow();
				PopUpManager.addPopUp(window, this, true);
				PopUpManager.centerPopUp(window);
			}
			
			private function exportData():void
			{
				DBGATrackerManager.trackPageview("/exportWindow");
				var window:ExportWindow = new ExportWindow();
				PopUpManager.addPopUp(window, this, true);
				PopUpManager.centerPopUp(window);
			}
			
			private function popUpCopyWindow():void
			{
				DBGATrackerManager.trackPageview("/copyWindow");
				copyWindow.visible = true;
			}
			
			private function popUpXMLWindow():void
			{
				DBGATrackerManager.trackPageview("/xmlWindow");
				xmlWindow.visible = true;
			}
			
			private function popUpTextureAtlasWindow():void
			{
				DBGATrackerManager.trackPageview("/textureWindow");
				textureAtlasWindow.visible = true;
			}
			
			private function popUpHelpWindow():void
			{
				DBGATrackerManager.trackPageview("/helpWindow");
				aboutWindow.visible = true;
			}
			
			private function uncaughtErrorHandler(e:UncaughtErrorEvent):void
			{
				Alert.show(e.error);
			}
			
			private function clearAlert():void
			{
				if(_alert)
				{
					PopUpManager.removePopUp(_alert);
					_alert = null;
				}
			}
			
			private function updateCurrentArmature():void
			{
				if(_importDataProxy.armatureProxy.armatureData)
				{
					DBGATrackerManager.trackEvent("/:UpdateArmature", "/:UpdateArmature");
					var armatureNames:Vector.<String> = new Vector.<String>;
					armatureNames.push(_importDataProxy.armatureProxy.armatureData.name);
					ImportCommand.instance.importFLAData(true, false, armatureNames);
				}
			}
			
			private function removeCurrentArmature():void
			{
				if(_importDataProxy.armatureProxy.armatureData)
				{
					DBGATrackerManager.trackEvent("/:RemoveArmature", "/:RemoveArmature");
					RemoveArmatureCommand.instance.removeArmature(_importDataProxy.armatureProxy.armatureData.name);
				}
			}
			
			private function applicationCompleteHandler():void
			{
				DBGATrackerManager.createDBGATracker(this);
				DBGATrackerManager.trackPageview("/");
				DBGATrackerManager.trackEvent("Version", "Version:" + String(DragonBones.VERSION_NUMBER));
				DBGATrackerManager.trackEvent("Language", "Language:" + String(SettingDataProxy.getInstance().languageArrayCollection[language.selectedIndex].value));
				
				DBCloud.instance.addEventListener(DBCloudEvent.INITED, cloud_onInited);
				DBNetworkUtils.instance.addEventListener(DBNetworkEvent.STATUS_CHANGED, network_onStatusChanged);
				DBCloud.instance.init();
			}
			
			private function cloud_onInited(event:DBCloudEvent):void
			{
				DBCloud.instance.removeEventListener(DBCloudEvent.INITED, cloud_onInited);
			}
			
			private function network_onStatusChanged(event:DBNetworkEvent):void
			{
				trace("network_onStatusChanged");
				onlineStatus.selectedIndex = DBNetworkUtils.instance.isNetworkAvailable ? 1 : 0;
				if(DBNetworkUtils.instance.isNetworkAvailable)
				{
					DBCloud.instance.addEventListener(DBCloudEvent.LOAD_LATESTVERSION_SUCCESS, cloud_onLoadLatestVersionSuccess);
					DBCloud.instance.loadLatestVersion();
				}
			}
			
			private function cloud_onLoadLatestVersionSuccess(event:DBCloudEvent):void
			{
				trace("cloud_onLoadLatestVersionSuccess");
				var latestVersion:Number = Number(event.data.outputData);
				if(latestVersion > DragonBones.VERSION_NUMBER)
				{
					DBCloud.instance.ifNeedUpdate = 1;
					upgradeBtn.visible = true; 
				}
				else
				{
					DBCloud.instance.ifNeedUpdate = -1;
					upgradeBtn.visible = false; 
				}
			}
			
			private function checkOnlineStatus():void
			{
				DBGATrackerManager.trackEvent("/:CheckOnlineStatus", "/:CheckOnlineStatus");
				DBNetworkUtils.instance.testNetwork();
			}
			
			private function downloadNewVersion():void
			{
				DBGATrackerManager.trackEvent("/:DownloadNewVersion", "/:DownloadNewVersion. CurrentVersion:" + String(DragonBones.VERSION));
				navigateToURL(new URLRequest("http://dragonbones.github.io/download.html"));
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	<s:VGroup width="100%" height="100%" gap="10" 
			  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
		<s:HGroup width="100%" clipAndEnableScrolling="true">
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','import')}"
					  click="importData()"
					  />
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','export')}"
					  click="exportData()"
					  />
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','textureAtlas')}"
					  click="popUpTextureAtlasWindow()"
					  />
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','xml')}"
					  click="popUpXMLWindow()"
					  />
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','copyBehaviors')}"
					  click="popUpCopyWindow()"
					  />
			<s:Button width="68" height="24" cornerRadius="0"
					  label="{resourceManager.getString('resources','help')}"
					  click="popUpHelpWindow()"
					  />
			<s:Spacer width="100%"/>
			<mx:ViewStack id="onlineStatus" height="100%">
				<s:NavigatorContent height="100%">
					<s:Label id="offlineLabel" height="100%" verticalAlign="middle" color="#999999" text="offline" 
							 buttonMode="true" useHandCursor="true" toolTip="click to check internet again"
							 click="checkOnlineStatus()"/>
				</s:NavigatorContent>
				<s:NavigatorContent height="100%">
					<s:Label id="upgradeBtn" width="24" right="0" color="#03E2EA"  text="&lt;&lt;" rotation="90" visible="false"
							 verticalAlign="middle" textAlign="center" buttonMode="true" useHandCursor="true" toolTip="new version detected"
							 click="downloadNewVersion()"/>
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:DropDownList id="language" width="80" height="24" cornerRadius="0" textAlign="right"
							dataProvider="{SettingDataProxy.getInstance().languageArrayCollection}"
							selectedIndex="@{SettingDataProxy.getInstance().languageID}"
							/>
		</s:HGroup>
		
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('resources','skeleton')}" fontWeight="bold"/>
				<s:DropDownList width="100%" height="24"
								labelField="name"
								dataProvider="{ImportDataProxy.getInstance().armaturesAC}"
								selectedItem ="@{ImportDataProxy.getInstance().armatureProxy.armatureData}"
								/>
				<s:DropDownList id="skinDropDownList" width="0" visible="false" height="24"
								labelField="name"
								dataProvider="{ImportDataProxy.getInstance().armatureProxy.skinsAC}"
								selectedItem ="@{ImportDataProxy.getInstance().armatureProxy.selectedSkinData}"
								/>
				<s:Button icon="@Embed(source='./assets/update_icon.png')" width="21" height="21" toolTip="Sync change of selected skeleton from Flash Pro"
						  click="updateCurrentArmature()"/>
				<s:Button icon="@Embed(source='./assets/remove_icon.png')" width="21" height="21" toolTip="Remove selected skeleton from list"
						  click="removeCurrentArmature()"/>
			</s:HGroup>
			<mx:HDividedBox width="100%" height="100%">
				<view:ArmatureViewer id="armatureViewer" width="60%" height="100%" armature="{ImportDataProxy.getInstance().armatureProxy.armature}"/>
				<view:ControlPanelGroup width="40%" height="100%"/>
			</mx:HDividedBox>
		</s:VGroup>
	</s:VGroup>
	<view:CopyWindow id="copyWindow" visible="false"/>
	<view:XMLWindow id="xmlWindow" visible="false"/>
	<view:TextureAtlasWindow id="textureAtlasWindow" visible="false"/>
	<view:HelpWindow id="aboutWindow" visible="false"/>
</s:Application>
